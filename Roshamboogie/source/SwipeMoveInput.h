//
//  SwipeMoveInput.h
//  Roshamboogie
//
//  Created by Ikra Monjur on 3/7/21.
//  Copyright Â© 2021 Game Design Initiative at Cornell. All rights reserved.
//

#ifndef SwipeMoveInput_h
#define SwipeMoveInput_h

#include <cugl/cugl.h>

using namespace cugl;

class SwipeMoveInput {
private:

    /** Force generated by the left arrow key */
    float _forceLeft;
    /** Force generated by the right arrow key */
    float _forceRight;
    /** Force generated by the up arrow key */
    float _forceUp;
    /** Force generated by the down arrow key */
    float _forceDown;
    
    // TOUCH SUPPORT
    /** The initial touch location for the current gesture */
    cugl::Vec2 _dtouch;
    /** The timestamp for the beginning of the current gesture */
    cugl::Timestamp _timestamp;
    /** The thrust produced by the player input */
    cugl::Vec2 _inputThrust;
    
public:
#pragma mark -
#pragma mark Constructors
    /**
     * Creates a new input controller.
     *
     * This constructor does NOT do any initialzation.  It simply allocates the
     * object. This makes it safe to use this class without a pointer.
     */
    SwipeMoveInput(); // Don't initialize.  Allow stack based
    
    /**
     * Disposes of this input controller, releasing all listeners.
     */
    ~SwipeMoveInput() { dispose(); }
    
    /**
     * Deactivates this input controller, releasing all listeners.
     *
     * This method will not dispose of the input controller. It can be reused
     * once it is reinitialized.
     */
    void dispose();
    
    /**
     * Initializes the input control
     *
     * This method works like a proper constructor, initializing the input
     * controller, allocating memory and attaching listeners.
     *
     * @return true if the controller was initialized successfully
     */
    bool init();
    
    /**
     * Returns the current input thrust.
     *
     * The thrust is determined by the last input method.
     *
     * @return The input thrust
     */
    const cugl::Vec2& getThrust() { return _inputThrust; }
    
#pragma mark -
#pragma mark Input Detection
    /**
     * Processes the currently cached inputs.
     *
     * This method is used to to poll the current input state.  This will poll
     * the keyboad and accelerometer.
     *
     * This method also gathers the delta difference in the touches. Depending
     * on the OS, we may see multiple updates of the same touch in a single
     * animation frame, so we need to accumulate all of the data together.
     */
    void update(float dt);
    
    /**
     * Clears any buffered inputs so that we may start fresh.
     */
    void clear();
    
#pragma mark -
#pragma mark Touch Callbacks
    /**
     * Callback for the beginning of a touch event
     *
     * @param t     The touch information
     * @param event The associated event
     */
    void touchBeganCB(const cugl::TouchEvent& event, bool focus);
    
    /**
     * Callback for the end of a touch event
     *
     * @param t     The touch information
     * @param event The associated event
     */
    void touchEndedCB(const cugl::TouchEvent& event, bool focus);
    
    /**
     * Callback for a touch moved event.
     *
     * @param event The associated event
     * @param previous The previous position of the touch
     * @param focus    Whether the listener currently has focus
     */
    void touchesMovedCB(const TouchEvent& event, const Vec2& previous, bool focus);
};

#endif /* SwipeMoveInput_h */
